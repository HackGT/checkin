var app=angular.module("checkin",["ui.router"]);app.config(["$httpProvider","SERVER_URL",function(e,n){e.defaults.headers.common["Access-Control-Allow-Origin"]="*",e.interceptors.push(function(){return{request:function(e){return 0!==e.url.indexOf("api/")&&0!==e.url.indexOf("auth/")||(e.url=n.BASE_URL+e.url,e.headers["Access-Control-Allow-Origin"]="*"),console.log(e),e}}})}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,n){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController"}).state("checkin",{url:"/checkin",templateUrl:"views/checkin/checkin.html"})}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,n,o,t,r){function l(n){return console.log("auth success",n),r.create(n.token,n.user),e(function(e){e(n.user)})}function c(n,o){return console.log("auth fail",n),t.go("login"),e(function(e,o){o(n)})}var i={};return i.loginWithPassword=function(e,o){return n.post("auth/login",{email:e,password:o}).then(function(e){return e.data}).then(l,c)},i.loginWithToken=function(e){return n.post("auth/login",{token:e}).then(function(e){return e.data}).then(l,function(e){console.log(e)})},i}]),angular.module("checkin").service("Session",["$rootScope","$window",function(e,n){this.create=function(o,t){n.localStorage.jwt=o,n.localStorage.userId=t._id,n.localStorage.currentUser=JSON.stringify(t),e.currentUser=t},this.destroy=function(o){delete n.localStorage.jwt,delete n.localStorage.userId,delete n.localStorage.currentUser,e.currentUser=null,o&&o()},this.getToken=function(){return n.localStorage.jwt},this.getUserId=function(){return n.localStorage.userId},this.getUser=function(){return JSON.parse(n.localStorage.currentUser)}}]),angular.module("checkin").controller("LoginController",["$scope","AuthService",function(e,n){function o(e){console.log("success",e)}function t(e){console.log("failure",e)}e.login=function(){n.loginWithPassword(e.email,e.password).then(o,t)}}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"http://f4819ebc.ngrok.io/"});
//# sourceMappingURL=data:application/json;base64,
