var app=angular.module("checkin",["ui.router"]);app.config(["$httpProvider","SERVER_URL",function(e,t){e.defaults.headers.common["Access-Control-Allow-Origin"]="*",e.interceptors.push(function(){return{request:function(e){return 0!==e.url.indexOf("api/")&&0!==e.url.indexOf("auth/")||(e.url=t.BASE_URL+e.url,e.headers["Access-Control-Allow-Origin"]="*"),console.log(e),e}}})}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController"}).state("checkin",{url:"/checkin",templateUrl:"views/checkin/checkin.html"})}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,t,n,o,r){function l(e){return e.data}function c(t){return console.log("auth success",t),r.create(t.token,t.user),e(function(e){e(t.user)})}function i(t,n){return console.log("auth fail",t),o.go("login"),e(function(e,n){n(t)})}var u={};return u.loginWithPassword=function(e,n){return t.post("auth/login",{email:e,password:n}).then(l,l).then(c,i)},u.loginWithToken=function(e){return console.warn("Not actually sure if this works yet!"),t.post("auth/login",{token:e}).then(l).then(c,function(){400===status&&r.destroy().then(i)})},u}]),angular.module("checkin").service("Session",["$rootScope","$window","$q",function(e,t,n){this.create=function(n,o){t.localStorage.jwt=n,t.localStorage.userId=o._id,t.localStorage.currentUser=JSON.stringify(o),e.currentUser=o},this.destroy=function(){return delete t.localStorage.jwt,delete t.localStorage.userId,delete t.localStorage.currentUser,e.currentUser=null,n(function(e,t){e()})},this.getToken=function(){return t.localStorage.jwt},this.getUserId=function(){return t.localStorage.userId},this.getUser=function(){return JSON.parse(t.localStorage.currentUser)}}]),angular.module("checkin").controller("LoginController",["$scope","AuthService",function(e,t){function n(e){console.log("success",e)}function o(e){console.log("failure",e)}e.login=function(){t.loginWithPassword(e.email,e.password).then(n,o)}}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"https://apply.hackgt.com/"});
//# sourceMappingURL=data:application/json;base64,
