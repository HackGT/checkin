var app=angular.module("checkin",["ui.router"]);app.config(["$httpProvider",function(e,t){e.interceptors.push("ApiAuthenticator")}]),app.factory("ApiAuthenticator",["Session","SERVER_URL",function(e,t){return{request:function(n){0!==n.url.indexOf("api/")&&0!==n.url.indexOf("auth/")||(n.url=t.BASE_URL+n.url,n.headers["Access-Control-Allow-Origin"]=t.BASE_URL);var o=e.getToken();return o&&(n.headers["x-access-token"]=o),n}}}]),app.directive("title",["$rootScope","$timeout",function(e,t){return{link:function(){var n=function(n,o){t(function(){e.title=o.data&&o.data.pageTitle?o.data.pageTitle:"Default title"})};e.$on("$stateChangeSuccess",n)}}}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController",data:{requireLogin:!1,pageTitle:"Login"}}).state("app",{abstract:!0,views:{"@":{templateUrl:"views/base.html"},"toolbar@app":{templateUrl:"views/toolbar/toolbar.html",controller:"ToolbarController"}},data:{requireLogin:!0,pageTitle:"Checkin"}}).state("app.checkin",{url:"/checkin",templateUrl:"views/checkin/checkin.html",controller:"CheckinController"}).state("app.groups",{url:"/groups",templateUrl:"views/groups/groups.html",controller:"GroupsController"}),t.otherwise("/checkin")}]).run(["$rootScope","$state","Session",function(e,t,n){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeStart",function(e,o,r){var u=o.data.requireLogin;u&&!n.getToken()&&(e.preventDefault(),t.go("login"))}),n.getToken()||t.go("login")}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,t,n,o,r){function u(t){var n=t.data;return console.log("auth success",n),r.create(n.token,n.user),e(function(e){e(n.user)})}function s(t,n){return console.log("auth fail",t),o.go("login"),e(function(e,n){n(t)})}var i={},l="auth/";return i.loginWithPassword=function(e,n){return t.post(l+"login",{email:e,password:n}).then(u,s)},i.loginWithToken=function(e){return console.warn("Not actually sure if this works yet!"),t.post(l+"login",{token:e}).then(u,function(){400===status&&r.destroy().then(s)})},i}]),angular.module("checkin").factory("GroupService",["$q","$http","Session",function(e,t,n){var o="api/groups/",r={};return r.getGroups=function(){return t.get(o)},r.createGroup=function(e){return t.post(o,{groupName:e})},r.getVolunteers=function(e){return t.get(o+e+"/volunteers")},r.addVolunteerToGroup=function(e,n){return t.put(o+n+"/volunteers/"+e)},r.removeVolunteerFromGroup=function(e,n){return t.delete(o+n+"/volunteers/"+e)},r.addUsersToGroup=function(e,n){return t.put(group+e,n)},r.removeUsersFromGroup=function(e,n){return t.delete(o+e,n)},r}]),angular.module("checkin").service("Session",["$rootScope","$window","$q",function(e,t,n){this.create=function(n,o){t.localStorage.jwt=n,t.localStorage.userId=o._id,t.localStorage.currentUser=JSON.stringify(o),e.currentUser=o},this.destroy=function(){return delete t.localStorage.jwt,delete t.localStorage.userId,delete t.localStorage.currentUser,e.currentUser=null,n(function(e,t){e()})},this.getToken=function(){return t.localStorage.jwt},this.getUserId=function(){return t.localStorage.userId},this.getUser=function(){return JSON.parse(t.localStorage.currentUser)}}]),angular.module("checkin").factory("UserService",["$q","$http","Session",function(e,t,n){var o="api/users",r=o+"/",u={};return u.getUsers=function(e){void 0===e.page&&void 0===e.size||(e.page=e.page||0,e.size=e.size||50);var n=e?o+"?"+$.param({text:e.text,page:e.page,size:e.size,group:e.group}):r;return t.get(n)},u.checkin=function(e){return t.post(r+e+"/checkin")},u.checkout=function(e){return t.post(r+e+"/checkout")},u}]),angular.module("checkin").controller("CheckinController",["$scope","UserService",function(e,t){function n(){return e.query?e.query.length>0&&e.query.length<3?s:e.query:null}function o(){e.users={users:[],busy:!1,nextPage:0,totalPages:0,totalUsers:0,getNextPage:function(){this.busy||(this.busy=!0,this.nextPage=this.nextPage+1,t.getUsers({text:n(),page:this.nextPage}).then(r.bind(this)))}}}function r(e){console.log(e.data),this.users=this.users.concat(e.data.users),this.totalUsers=e.data.totalUsers,this.totalPages=e.data.totalPages,this.nextPage=this.nextPage+1,this.busy=!1,u.sticky("refresh")}var u=$(".userSearch > .sticky");u.sticky({context:".userList > table"});var s=null;e.searchUsers=function(){var u=n();if(console.log("query:",u),u!==s){var i=s=t.getUsers({page:0,text:u});i.then(function(t){i===s&&(o(),r.bind(e.users)(t))})}},e.users={},o(),e.selectedUser=null,e.setSelectedUser=function(t){var n=$(".userDetails");n.modal(),e.selectedUser=t,t?n.modal("show"):n.modal("hide")},e.users.getNextPage(),e.checkin=function(e){console.log("checkin",e)},e.checkout=function(e){console.log("checkout",e)}}]),angular.module("checkin").controller("GroupsController",["$scope","UserService","GroupService",function(e,t,n){e.groups=[],e.getGroups=function(){n.getGroups().then(function(t){e.groups=t.data})},e.getGroups(),e.createGroup=function(t){t&&n.createGroup(t).then(function(t){e.groups.push(t.data)})},e.selectedGroup=null,e.selectGroup=function(t){e.selectedNewVolunteer=null,e.selectedGroup=t,n.getVolunteers(t._id).then(function(t){e.selectedGroup.volunteers=t.data.volunteers})},e.selectedNewVolunteer=null,e.setSelectedNewVolunteer=function(t){e.selectedNewVolunteer=t,t&&e.$apply()},e.addNewVolunteer=function(t,o){n.addVolunteerToGroup(t._id,o._id).then(function(t){e.selectedGroup.volunteers.push(t.data),e.setSelectedNewVolunteer(null)})},e.removeVolunteerFromGroup=function(t,o){n.removeVolunteerFromGroup(t._id,o._id).then(function(t){e.selectedGroup.volunteers.splice(e.selectedGroup.volunteers.findIndex(function(e){return e._id===t.data._id}),1)})},$(".add-volunteer").search({apiSettings:{responseAsync:function(e,n){e.urlData.query;t.getUsers({text:e.urlData.query}).then(function(e){results=e.data.users.map(function(e){return{title:e.profile.name||e.email,description:e.profile.name?e.email:void 0,user:e}}),n({results:results})})}},minCharacters:3,onSelect:function(t){e.setSelectedNewVolunteer(t.user)}})}]),angular.module("checkin").controller("LoginController",["$scope","$state","AuthService",function(e,t,n){function o(e){console.log("success",e),t.go("app.checkin")}function r(e){console.log("failure",e)}e.login=function(){n.loginWithPassword(e.email,e.password).then(o,r)}}]),angular.module("checkin").controller("ToolbarController",["$scope","$state","$rootScope","Session",function(e,t,n,o){var r=o.getUser();e.states=[{name:"app.checkin",title:"Checkin"},{name:"app.groups",title:"Groups",adminOnly:!0}].filter(function(e){return!(e.adminOnly&&!r.admin)}),$(".logout").click(function(){o.destroy().then(function(){t.go("login")})})}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"https://ce4e7571.ngrok.io/"});
//# sourceMappingURL=data:application/json;base64,
