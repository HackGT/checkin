var app=angular.module("checkin",["ui.router"]);app.config(["$httpProvider",function(e,t){e.interceptors.push("ApiAuthenticator")}]),app.factory("ApiAuthenticator",["Session","SERVER_URL",function(e,t){return{request:function(n){0!==n.url.indexOf("api/")&&0!==n.url.indexOf("auth/")||(n.url=t.BASE_URL+n.url,n.headers["Access-Control-Allow-Origin"]=t.BASE_URL);var r=e.getToken();return r&&(n.headers["x-access-token"]=r),n}}}]),app.directive("title",["$rootScope","$timeout",function(e,t){return{link:function(){var n=function(n,r){t(function(){e.title=r.data&&r.data.pageTitle?r.data.pageTitle:"Default title"})};e.$on("$stateChangeSuccess",n)}}}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController",data:{requireLogin:!1,pageTitle:"Login"}}).state("app",{abstract:!0,views:{"@":{templateUrl:"views/base.html"},"toolbar@app":{templateUrl:"views/toolbar/toolbar.html",controller:"ToolbarController"}},data:{requireLogin:!0,pageTitle:"Checkin"}}).state("app.checkin",{url:"/checkin",templateUrl:"views/checkin/checkin.html",controller:"CheckinController"}).state("app.groups",{url:"/groups",templateUrl:"views/groups/groups.html",controller:"GroupsController"}),t.otherwise("/checkin")}]).run(["$rootScope","$state","Session",function(e,t,n){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeStart",function(e,r,o){var u=r.data.requireLogin;u&&!n.getToken()&&(e.preventDefault(),t.go("login"))}),n.getToken()||t.go("login")}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,t,n,r,o){function u(t){var n=t.data;return console.log("auth success",n),o.create(n.token,n.user),e(function(e){e(n.user)})}function s(t,n){return console.log("auth fail",t),r.go("login"),e(function(e,n){n(t)})}var c={},i="auth/";return c.loginWithPassword=function(e,n){return t.post(i+"login",{email:e,password:n}).then(function(e){if(user=e.data.user,!(user.admin||user.checkin&&(user.checkin.groups.length>0||user.checkin.all)))throw new Error("User is not an admin or volunteer");return e}).then(u,s)},c.loginWithToken=function(e){return console.warn("Not actually sure if this works yet!"),t.post(i+"login",{token:e}).then(u,function(){400===status&&o.destroy().then(s)})},c}]),angular.module("checkin").factory("GroupService",["$q","$http","Session",function(e,t,n){var r="api/groups/",o={};return o.getGroups=function(){return t.get(r)},o.createGroup=function(e){return t.post(r,{groupName:e})},o.getVolunteers=function(e){return t.get(r+e+"/volunteers")},o.addVolunteerToGroup=function(e,n){return t.put(r+n+"/volunteers/"+e)},o.removeVolunteerFromGroup=function(e,n){return t.delete(r+n+"/volunteers/"+e)},o.addUsersToGroup=function(e,n){return t.put(r+e+"/users",{users:n})},o.removeUsersFromGroup=function(e,n){return t.delete(r+e+"/users",{users:n})},o}]),angular.module("checkin").service("Session",["$rootScope","$window","$q",function(e,t,n){this.create=function(n,r){t.localStorage.jwt=n,t.localStorage.userId=r._id,t.localStorage.currentUser=JSON.stringify(r),e.currentUser=r},this.destroy=function(){return delete t.localStorage.jwt,delete t.localStorage.userId,delete t.localStorage.currentUser,e.currentUser=null,n(function(e,t){e()})},this.getToken=function(){return t.localStorage.jwt},this.getUserId=function(){return t.localStorage.userId},this.getUser=function(){return JSON.parse(t.localStorage.currentUser)}}]),angular.module("checkin").factory("UserService",["$q","$http","Session",function(e,t,n){var r="api/users",o=r+"/",u="api/groups/",s={};return s.getUsers=function(e){var u=n.getUser();u.admin||u.checkin&&u.checkin.all||e.group||(e.group=u.checkin.groups),e.group&&!Array.isArray(e.group)&&(e.group=[e.group]),void 0===e.page&&void 0===e.size||(e.page=e.page||0,e.size=e.size||50);var s=e?r+"?"+$.param({text:e.text,page:e.page,size:e.size,group:e.group}):o;return t.get(s)},s.checkin=function(e){var r=e._id,s=o+r+"/checkin",c=n.getUser();if(!(c.admin||c.checkin&&c.checkin.all)){var i=e.groups.find(function(e){return c.checkin.groups.indexOf(e)!==-1});s=u+i+"/users/"+r+"/checkin"}return t.post(s)},s.checkout=function(e){var r=e._id,s=o+r+"/checkout",c=n.getUser();if(!(c.admin||c.checkin&&c.checkin.all)){var i=e.groups.find(function(e){return c.checkin.groups.indexOf(e)!==-1});s=u+i+"/users/"+r+"/checkout"}return t.post(s)},s}]),angular.module("checkin").controller("CheckinController",["$scope","UserService",function(e,t){function n(){return e.query?e.query.length>0&&e.query.length<3?s:e.query:null}function r(){e.users={users:[],busy:!1,nextPage:0,totalPages:0,totalUsers:0,getNextPage:function(){this.busy||(this.busy=!0,t.getUsers({text:n(),page:this.nextPage}).then(o.bind(this)),this.nextPage=this.nextPage+1)}}}function o(e){console.log(e.data),this.users=this.users.concat(e.data.users),this.totalUsers=e.data.totalUsers,this.totalPages=e.data.totalPages,this.nextPage=this.nextPage+1,this.busy=!1,u.sticky("refresh")}var u=$(".userSearch > .sticky");u.sticky({context:".userList > table"});var s=null;e.searchUsers=function(){var u=n();console.log("query:",u),u!==s&&(s=u,t.getUsers({page:0,text:u}).then(function(t){u===s&&(r(),o.bind(e.users)(t))}))},e.users={},r(),e.selectedUser=null;var c=$(".userDetails");e.setSelectedUser=function(t){c.modal(),e.selectedUser=t,t?c.modal("show"):c.modal("hide")},e.users.getNextPage(),e.checkin=function(e){console.log("checkin",e),t.checkin(e).then(function(t){console.log("checked in",t),e.status.checkedIn=!0,c.modal("hide")})},e.checkout=function(e){console.log("checkout",e),t.checkout(e).then(function(t){console.log("checked out",t),e.status.checkedIn=!1,c.modal("hide")})}}]),angular.module("checkin").controller("GroupsController",["$scope","UserService","GroupService",function(e,t,n){function r(t){t=t||e.selectedGroup.searchUsers,e.selectedGroup.searchUsers=t.filter(function(t){return e.selectedGroup.users.findIndex(function(e){return e._id===t._id})===-1})}function o(){return!e.userQuery||e.userQuery.length<3?null:e.userQuery}e.groups=[],e.getGroups=function(){n.getGroups().then(function(t){e.groups=t.data})},e.getGroups(),e.createGroup=function(t){t&&n.createGroup(t).then(function(t){e.groups.push(t.data)})},e.selectedGroup=null,e.selectGroup=function(r){e.selectedNewVolunteer=null,e.selectedGroup=r,n.getVolunteers(r._id).then(function(t){e.selectedGroup.volunteers=t.data.volunteers}),t.getUsers({group:r._id}).then(function(t){e.selectedGroup.users=t.data.users})},e.selectedNewVolunteer=null,e.setSelectedNewVolunteer=function(t){e.selectedNewVolunteer=t,t&&e.$apply()},e.addNewVolunteer=function(t,r){n.addVolunteerToGroup(t._id,r._id).then(function(t){e.selectedGroup.volunteers.push(t.data),e.setSelectedNewVolunteer(null)})},e.removeVolunteerFromGroup=function(t,r){n.removeVolunteerFromGroup(t._id,r._id).then(function(t){e.selectedGroup.volunteers.splice(e.selectedGroup.volunteers.findIndex(function(e){return e._id===t.data._id}),1)})},$(".add-volunteer").search({apiSettings:{responseAsync:function(n,r){n.urlData.query;t.getUsers({text:n.urlData.query}).then(function(t){results=t.data.users.filter(function(t){return e.selectedGroup.volunteers.findIndex(function(e){return e._id===t._id})===-1}).map(function(e){return{title:e.profile.name||e.email,description:e.profile.name?e.email:void 0,user:e}}),r({results:results})})}},minCharacters:3,onSelect:function(t){e.setSelectedNewVolunteer(t.user)}});var u=null;e.searchUsers=function(){var e=o();console.log("query:",e),e&&e!==u&&(u=e,t.getUsers({text:e}).then(function(t){e===u&&(console.log(t.data),r(t.data.users))}))},e.addUsersToGroup=function(){var t=e.selectedGroup.searchUsers.filter(function(e){return e.active}).map(function(e){return e._id});n.addUsersToGroup(e.selectedGroup._id,t).then(function(t){e.selectedGroup.users=t.data.users,r()})},e.addAllUsersToGroup=function(){var t=e.selectedGroup.searchUsers.map(function(e){return e._id});n.addUsersToGroup(e.selectedGroup._id,t).then(function(t){e.selectedGroup.users=t.data.users,r()})}}]),angular.module("checkin").controller("LoginController",["$scope","$state","AuthService",function(e,t,n){function r(e){console.log("success",e),t.go("app.checkin")}function o(e){console.log("failure",e)}e.login=function(){n.loginWithPassword(e.email,e.password).then(r,o)}}]),angular.module("checkin").controller("ToolbarController",["$scope","$state","$rootScope","Session",function(e,t,n,r){var o=r.getUser();e.states=[{name:"app.checkin",title:"Checkin"},{name:"app.groups",title:"Groups",adminOnly:!0}].filter(function(e){return!(e.adminOnly&&!o.admin)}),$(".logout").click(function(){r.destroy().then(function(){t.go("login")})})}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"https://apply.hackgt.com/"});
//# sourceMappingURL=data:application/json;base64,
