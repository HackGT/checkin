var app=angular.module("checkin",["ui.router","infinite-scroll"]);app.config(["$httpProvider",function(e,t){e.interceptors.push("ApiAuthenticator")}]),app.factory("ApiAuthenticator",["Session","SERVER_URL",function(e,t){return{request:function(n){0!==n.url.indexOf("api/")&&0!==n.url.indexOf("auth/")||(n.url=t.BASE_URL+n.url,n.headers["Access-Control-Allow-Origin"]=t.BASE_URL);var o=e.getToken();return o&&(n.headers["x-access-token"]=o),n}}}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController"}).state("checkin",{url:"/checkin",templateUrl:"views/checkin/checkin.html",controller:"CheckinController"})}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,t,n,o,r){function c(t){var n=t.data;return console.log("auth success",n),r.create(n.token,n.user),e(function(e){e(n.user)})}function i(t,n){return console.log("auth fail",t),o.go("login"),e(function(e,n){n(t)})}var s={},u="auth/";return s.loginWithPassword=function(e,n){return t.post(u+"login",{email:e,password:n}).then(c,i)},s.loginWithToken=function(e){return console.warn("Not actually sure if this works yet!"),t.post(u+"login",{token:e}).then(c,function(){400===status&&r.destroy().then(i)})},s}]),angular.module("checkin").service("Session",["$rootScope","$window","$q",function(e,t,n){this.create=function(n,o){t.localStorage.jwt=n,t.localStorage.userId=o._id,t.localStorage.currentUser=JSON.stringify(o),e.currentUser=o},this.destroy=function(){return delete t.localStorage.jwt,delete t.localStorage.userId,delete t.localStorage.currentUser,e.currentUser=null,n(function(e,t){e()})},this.getToken=function(){return t.localStorage.jwt},this.getUserId=function(){return t.localStorage.userId},this.getUser=function(){return JSON.parse(t.localStorage.currentUser)}}]),angular.module("checkin").factory("UserService",["$q","$http","Session",function(e,t,n){var o="api/users",r=o+"/",c={};return c.getUsers=function(e){var n=e?o+"?"+$.param({text:e.text,page:e.page?e.page:0,size:e.size?e.size:50}):r;return t.get(n)},c.checkin=function(e){return t.post(r+e+"/checkin")},c.checkout=function(e){return t.post(r+e+"/checkout")},c}]),angular.module("checkin").controller("CheckinController",["$scope","UserService",function(e,t){e.users={users:[],busy:!1,nextPage:0,totalPages:1/0},e.selectedUser=null,e.setSelectedUser=function(t){var n=$(".ui.modal.userDetails");n.modal(),e.selectedUser=t,t?n.modal("show"):n.modal("hide")},e.users.getNextPage=function(){this.busy||this.nextPage>=this.totalPages||(this.busy=!0,t.getUsers({page:this.nextPage}).then(function(e){console.log(e.data),this.users=this.users.concat(e.data.users),this.totalPages=e.data.totalPages,this.nextPage+=1,this.busy=!1}.bind(this)))},e.checkin=function(e){t.checkin(e).then(function(e){console.log("checked in",e)})},e.checkout=function(e){t.checkout(e).then(function(e){console.log("checked out",e)})}}]),angular.module("checkin").controller("LoginController",["$scope","AuthService",function(e,t){function n(e){console.log("success",e)}function o(e){console.log("failure",e)}e.login=function(){t.loginWithPassword(e.email,e.password).then(n,o)}}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"https://apply.hackgt.com/"});
//# sourceMappingURL=data:application/json;base64,
