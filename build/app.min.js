var app=angular.module("checkin",["ui.router","infinite-scroll"]);app.config(["$httpProvider",function(e,t){e.interceptors.push("ApiAuthenticator")}]),app.factory("ApiAuthenticator",["Session","SERVER_URL",function(e,t){return{request:function(n){0!==n.url.indexOf("api/")&&0!==n.url.indexOf("auth/")||(n.url=t.BASE_URL+n.url,n.headers["Access-Control-Allow-Origin"]=t.BASE_URL);var o=e.getToken();return o&&(n.headers["x-access-token"]=o),n}}}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController"}).state("checkin",{url:"/checkin",templateUrl:"views/checkin/checkin.html",controller:"CheckinController"})}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,t,n,o,r){function c(t){var n=t.data;return console.log("auth success",n),r.create(n.token,n.user),e(function(e){e(n.user)})}function i(t,n){return console.log("auth fail",t),o.go("login"),e(function(e,n){n(t)})}var s={},u="auth/";return s.loginWithPassword=function(e,n){return t.post(u+"login",{email:e,password:n}).then(c,i)},s.loginWithToken=function(e){return console.warn("Not actually sure if this works yet!"),t.post(u+"login",{token:e}).then(c,function(){400===status&&r.destroy().then(i)})},s}]),angular.module("checkin").factory("UserService",["$q","$http","Session",function(e,t,n){var o="api/users",r=o+"/",c={};return c.getUsers=function(e){var n=e?o+"?"+$.param({text:e.text,page:e.page?e.page:0,size:e.size?e.size:50}):r;return t.get(n)},c.checkin=function(e){return t.post(r+e+"/checkin")},c.checkout=function(e){return t.post(r+e+"/checkout")},c}]),angular.module("checkin").service("Session",["$rootScope","$window","$q",function(e,t,n){this.create=function(n,o){t.localStorage.jwt=n,t.localStorage.userId=o._id,t.localStorage.currentUser=JSON.stringify(o),e.currentUser=o},this.destroy=function(){return delete t.localStorage.jwt,delete t.localStorage.userId,delete t.localStorage.currentUser,e.currentUser=null,n(function(e,t){e()})},this.getToken=function(){return t.localStorage.jwt},this.getUserId=function(){return t.localStorage.userId},this.getUser=function(){return JSON.parse(t.localStorage.currentUser)}}]),angular.module("checkin").controller("CheckinController",["$scope","UserService",function(e,t){e.users={users:[],busy:!1,nextPage:0,totalPages:1/0},e.users.getNextPage=function(){this.busy||this.nextPage>=this.totalPages||(this.busy=!0,t.getUsers({page:this.nextPage}).then(function(e){console.log(e.data),this.users=this.users.concat(e.data.users),this.totalPages=e.data.totalPages,this.nextPage+=1,this.busy=!1}.bind(this)))},e.checkin=function(e){t.checkin(e).then(function(e){console.log("checked in",e)})},e.checkout=function(e){t.checkout(e).then(function(e){console.log("checked out",e)})}}]),angular.module("checkin").controller("LoginController",["$scope","AuthService",function(e,t){function n(e){console.log("success",e)}function o(e){console.log("failure",e)}e.login=function(){t.loginWithPassword(e.email,e.password).then(n,o)}}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"https://a8fe9a69.ngrok.io/"});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsInJvdXRlcy5qcyIsImF1dGgvQXV0aFNlcnZpY2UuanMiLCJ1c2Vycy9Vc2VyU2VydmljZS5qcyIsInNlc3Npb24vU2Vzc2lvbi5qcyIsImNoZWNraW4vY2hlY2tpbkNvbnRyb2xsZXIuanMiLCJsb2dpbi9sb2dpbkNvbnRyb2xsZXIuanMiLCJjb25maWcuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRodHRwUHJvdmlkZXIiLCJTRVJWRVJfVVJMIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsImZhY3RvcnkiLCJTZXNzaW9uIiwicmVxdWVzdCIsInVybCIsImluZGV4T2YiLCJCQVNFX1VSTCIsImhlYWRlcnMiLCJ0b2tlbiIsImdldFRva2VuIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIiRxIiwiJGh0dHAiLCIkcm9vdFNjb3BlIiwiJHN0YXRlIiwibG9naW5TdWNjZXNzIiwicmVzcG9uc2UiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsImNyZWF0ZSIsInVzZXIiLCJyZXNvbHZlIiwibG9naW5GYWlsdXJlIiwiY2FsbGJhY2siLCJnbyIsInJlamVjdCIsImF1dGhTZXJ2aWNlIiwiYmFzZVVybCIsImxvZ2luV2l0aFBhc3N3b3JkIiwiZW1haWwiLCJwYXNzd29yZCIsInBvc3QiLCJ0aGVuIiwibG9naW5XaXRoVG9rZW4iLCJ3YXJuIiwic3RhdHVzIiwiZGVzdHJveSIsInVzZXJzIiwiYmFzZSIsIlVzZXJTZXJ2aWNlIiwiZ2V0VXNlcnMiLCJvcHRpb25zIiwiJCIsInBhcmFtIiwidGV4dCIsInBhZ2UiLCJzaXplIiwiZ2V0IiwiY2hlY2tpbiIsInVzZXJJZCIsImNoZWNrb3V0Iiwic2VydmljZSIsIiR3aW5kb3ciLCJ0aGlzIiwibG9jYWxTdG9yYWdlIiwiand0IiwiX2lkIiwiY3VycmVudFVzZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0VXNlcklkIiwiZ2V0VXNlciIsInBhcnNlIiwiJHNjb3BlIiwiYnVzeSIsIm5leHRQYWdlIiwidG90YWxQYWdlcyIsIkluZmluaXR5IiwiZ2V0TmV4dFBhZ2UiLCJjb25jYXQiLCJiaW5kIiwiQXV0aFNlcnZpY2UiLCJvblN1Y2Nlc3MiLCJvbkZhaWx1cmUiLCJsb2dpbiIsImNvbnN0YW50Il0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLFdBQ0EsWUFDQSxtQkFHQUYsS0FBQUcsUUFDQSxnQkFDQSxTQUFBQyxFQUFBQyxHQUdBRCxFQUFBRSxhQUFBQyxLQUFBLHVCQUlBUCxJQUFBUSxRQUFBLG9CQUNBLFVBQ0EsYUFDQSxTQUFBQyxFQUFBSixHQUNBLE9BQ0FLLFFBQUEsU0FBQVAsR0FDQSxJQUFBQSxFQUFBUSxJQUFBQyxRQUFBLFNBQUEsSUFBQVQsRUFBQVEsSUFBQUMsUUFBQSxXQUNBVCxFQUFBUSxJQUFBTixFQUFBUSxTQUFBVixFQUFBUSxJQUNBUixFQUFBVyxRQUFBLCtCQUFBVCxFQUFBUSxTQUVBLElBQUFFLEdBQUFOLEVBQUFPLFVBSUEsT0FIQUQsS0FDQVosRUFBQVcsUUFBQSxrQkFBQUMsR0FFQVosT0M1QkFGLFFBQUFDLE9BQUEsV0FDQUMsUUFDQSxpQkFDQSxxQkFDQSxTQUNBYyxFQUNBQyxHQUNBRCxFQUNBRSxNQUFBLFNBQ0FSLElBQUEsU0FDQVMsWUFBQSx5QkFDQUMsV0FBQSxvQkFFQUYsTUFBQSxXQUNBUixJQUFBLFdBQ0FTLFlBQUEsNkJBQ0FDLFdBQUEseUJDaEJBcEIsUUFBQUMsT0FBQSxXQUNBTSxRQUFBLGVBQ0EsS0FDQSxRQUNBLGFBQ0EsU0FDQSxVQUNBLFNBQUFjLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFoQixHQUlBLFFBQUFpQixHQUFBQyxHQUNBLEdBQUFDLEdBQUFELEVBQUFDLElBR0EsT0FGQUMsU0FBQUMsSUFBQSxlQUFBRixHQUNBbkIsRUFBQXNCLE9BQUFILEVBQUFiLE1BQUFhLEVBQUFJLE1BQ0FWLEVB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QUMsSUFBQSxhQUFBRixNQUlBK0MsRUFBQWIsU0FBQSxTQUFBRCxHQUNBVixFQUFBVyxTQUFBRCxHQUNBakIsS0FBQSxTQUFBaEIsR0FDQUMsUUFBQUMsSUFBQSxjQUFBRixTQzNDQTNCLFFBQUFDLE9BQUEsV0FDQW1CLFdBQUEsbUJBQ0EsU0FDQSxjQUNBLFNBQUFzRCxFQUFBUSxHQUVBLFFBQUFDLEdBQUF4RCxHQUNBQyxRQUFBQyxJQUFBLFVBQUFGLEdBR0EsUUFBQXlELEdBQUF6RCxHQUNBQyxRQUFBQyxJQUFBLFVBQUFGLEdBR0ErQyxFQUFBVyxNQUFBLFdBQ0FILEVBQUEzQyxrQkFDQW1DLEVBQUFsQyxNQUFBa0MsRUFBQWpDLFVBQ0FFLEtBQUF3QyxFQUFBQyxPQ2RBcEYsUUFBQUMsT0FBQSxXQUFBcUYsU0FBQSxjQUNBMUUsU0FBQSIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdjaGVja2luJywgW1xuICAndWkucm91dGVyJyxcbiAgJ2luZmluaXRlLXNjcm9sbCcsXG5dKTtcblxuYXBwLmNvbmZpZyhbXG4gICckaHR0cFByb3ZpZGVyJyxcbiAgZnVuY3Rpb24oJGh0dHBQcm92aWRlciwgU0VSVkVSX1VSTCkge1xuXG4gICAgLy8gYWRkIHJvb3QgdXJsIHRvIGFsbCBhcGkgYW5kIGF1dGggcmVxdWVzdHNcbiAgICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdBcGlBdXRoZW50aWNhdG9yJyk7XG4gIH1cbl0pO1xuXG5hcHAuZmFjdG9yeSgnQXBpQXV0aGVudGljYXRvcicsIFtcbiAgJ1Nlc3Npb24nLFxuICAnU0VSVkVSX1VSTCcsXG4gIGZ1bmN0aW9uKFNlc3Npb24sIFNFUlZFUl9VUkwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVxdWVzdDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcudXJsLmluZGV4T2YoJ2FwaS8nKSA9PT0gMCB8fCBjb25maWcudXJsLmluZGV4T2YoJ2F1dGgvJykgPT09IDApIHtcbiAgICAgICAgICBjb25maWcudXJsID0gU0VSVkVSX1VSTC5CQVNFX1VSTCArIGNvbmZpZy51cmw7XG4gICAgICAgICAgY29uZmlnLmhlYWRlcnNbJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbiddID0gU0VSVkVSX1VSTC5CQVNFX1VSTDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9rZW4gPSBTZXNzaW9uLmdldFRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbikge1xuICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWyd4LWFjY2Vzcy10b2tlbiddID0gdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH1cbiAgICB9O1xuICB9XG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdjaGVja2luJylcbiAgLmNvbmZpZyhbXG4gICAgJyRzdGF0ZVByb3ZpZGVyJyxcbiAgICAnJHVybFJvdXRlclByb3ZpZGVyJyxcbiAgICBmdW5jdGlvbihcbiAgICAgICRzdGF0ZVByb3ZpZGVyLFxuICAgICAgJHVybFJvdXRlclByb3ZpZGVyKSB7XG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgLnN0YXRlKCdsb2dpbicsIHtcbiAgICAgICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9sb2dpbi9sb2dpbi5odG1sXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5Db250cm9sbGVyJyxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5zdGF0ZSgnY2hlY2tpbicsIHtcbiAgICAgICAgICAgIHVybDogJy9jaGVja2luJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY2hlY2tpbi9jaGVja2luLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NoZWNraW5Db250cm9sbGVyJyxcbiAgICAgICAgICB9KTtcbiAgICB9XG4gIF0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NoZWNraW4nKVxuICAuZmFjdG9yeSgnQXV0aFNlcnZpY2UnLCBbXG4gICAgJyRxJyxcbiAgICAnJGh0dHAnLFxuICAgICckcm9vdFNjb3BlJyxcbiAgICAnJHN0YXRlJyxcbiAgICAnU2Vzc2lvbicsXG4gICAgZnVuY3Rpb24oJHEsICRodHRwLCAkcm9vdFNjb3BlLCAkc3RhdGUsIFNlc3Npb24pIHtcbiAgICAgIHZhciBhdXRoU2VydmljZSA9IHt9O1xuICAgICAgdmFyIGJhc2VVcmwgPSAnYXV0aC8nO1xuXG4gICAgICBmdW5jdGlvbiBsb2dpblN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBjb25zb2xlLmxvZygnYXV0aCBzdWNjZXNzJywgZGF0YSk7XG4gICAgICAgIFNlc3Npb24uY3JlYXRlKGRhdGEudG9rZW4sIGRhdGEudXNlcik7XG4gICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhLnVzZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9naW5GYWlsdXJlKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhdXRoIGZhaWwnLCBkYXRhKTtcbiAgICAgICAgJHN0YXRlLmdvKCdsb2dpbicpO1xuICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgcmVqZWN0KGRhdGEpO1xuICAgICAgICB9KTtcblxuICAgICAgfVxuXG4gICAgICBhdXRoU2VydmljZS5sb2dpbldpdGhQYXNzd29yZCA9IGZ1bmN0aW9uKGVtYWlsLCBwYXNzd29yZCkge1xuICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAucG9zdChiYXNlVXJsICsgJ2xvZ2luJywge1xuICAgICAgICAgICAgZW1haWw6IGVtYWlsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4obG9naW5TdWNjZXNzLCBsb2dpbkZhaWx1cmUpO1xuICAgICAgfTtcblxuICAgICAgLy8gVE9ETyB1bnN1cmUgaWYgdGhpcyB3b3JrcyFcbiAgICAgIGF1dGhTZXJ2aWNlLmxvZ2luV2l0aFRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTm90IGFjdHVhbGx5IHN1cmUgaWYgdGhpcyB3b3JrcyB5ZXQhXCIpO1xuICAgICAgICByZXR1cm4gJGh0dHBcbiAgICAgICAgICAucG9zdChiYXNlVXJsICsgJ2xvZ2luJywge1xuICAgICAgICAgICAgdG9rZW46IHRva2VuXG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbihsb2dpblN1Y2Nlc3MsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICAgIFNlc3Npb24uZGVzdHJveSgpLnRoZW4obG9naW5GYWlsdXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBhdXRoU2VydmljZTtcbiAgICB9XG4gIF0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NoZWNraW4nKVxuICAuZmFjdG9yeSgnVXNlclNlcnZpY2UnLCBbXG4gICAgJyRxJyxcbiAgICAnJGh0dHAnLFxuICAgICdTZXNzaW9uJyxcbiAgICBmdW5jdGlvbigkcSwgJGh0dHAsIFNlc3Npb24pIHtcbiAgICAgIHZhciB1c2VycyA9ICdhcGkvdXNlcnMnO1xuICAgICAgdmFyIGJhc2UgPSB1c2VycyArICcvJztcblxuICAgICAgdmFyIFVzZXJTZXJ2aWNlID0ge307XG5cbiAgICAgIFVzZXJTZXJ2aWNlLmdldFVzZXJzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgdXJsID0gb3B0aW9ucyA/IHVzZXJzICsgJz8nICsgJC5wYXJhbShcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiBvcHRpb25zLnRleHQsXG4gICAgICAgICAgICBwYWdlOiBvcHRpb25zLnBhZ2UgPyBvcHRpb25zLnBhZ2UgOiAwLFxuICAgICAgICAgICAgc2l6ZTogb3B0aW9ucy5zaXplID8gb3B0aW9ucy5zaXplIDogNTBcbiAgICAgICAgICB9KSA6IGJhc2U7XG5cbiAgICAgICAgcmV0dXJuICRodHRwLmdldCh1cmwpO1xuICAgICAgfTtcblxuICAgICAgVXNlclNlcnZpY2UuY2hlY2tpbiA9IGZ1bmN0aW9uKHVzZXJJZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdChiYXNlICsgdXNlcklkICsgJy9jaGVja2luJyk7XG4gICAgICB9O1xuXG4gICAgICBVc2VyU2VydmljZS5jaGVja291dCA9IGZ1bmN0aW9uKHVzZXJJZCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdChiYXNlICsgdXNlcklkICsgJy9jaGVja291dCcpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFVzZXJTZXJ2aWNlO1xuICAgIH1cbiAgXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnY2hlY2tpbicpXG4gIC5zZXJ2aWNlKCdTZXNzaW9uJywgW1xuICAgICckcm9vdFNjb3BlJyxcbiAgICAnJHdpbmRvdycsXG4gICAgJyRxJyxcbiAgICBmdW5jdGlvbigkcm9vdFNjb3BlLCAkd2luZG93LCAkcSl7XG4gICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHRva2VuLCB1c2VyKXtcbiAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuand0ID0gdG9rZW47XG4gICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnVzZXJJZCA9IHVzZXIuX2lkO1xuICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5jdXJyZW50VXNlciA9IEpTT04uc3RyaW5naWZ5KHVzZXIpO1xuICAgICAgICAkcm9vdFNjb3BlLmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGRlbGV0ZSAkd2luZG93LmxvY2FsU3RvcmFnZS5qd3Q7XG4gICAgICAgIGRlbGV0ZSAkd2luZG93LmxvY2FsU3RvcmFnZS51c2VySWQ7XG4gICAgICAgIGRlbGV0ZSAkd2luZG93LmxvY2FsU3RvcmFnZS5jdXJyZW50VXNlcjtcbiAgICAgICAgJHJvb3RTY29wZS5jdXJyZW50VXNlciA9IG51bGw7XG4gICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5nZXRUb2tlbiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZS5qd3Q7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldFVzZXJJZCA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZS51c2VySWQ7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmdldFVzZXIgPSBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSgkd2luZG93LmxvY2FsU3RvcmFnZS5jdXJyZW50VXNlcik7XG4gICAgICB9O1xuICB9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnY2hlY2tpbicpXG4gIC5jb250cm9sbGVyKCdDaGVja2luQ29udHJvbGxlcicsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnVXNlclNlcnZpY2UnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgVXNlclNlcnZpY2UpIHtcblxuICAgICAgJHNjb3BlLnVzZXJzID0ge1xuICAgICAgICB1c2VyczogW10sXG4gICAgICAgIGJ1c3k6IGZhbHNlLFxuICAgICAgICBuZXh0UGFnZTogMCxcbiAgICAgICAgdG90YWxQYWdlczogSW5maW5pdHksXG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUudXNlcnMuZ2V0TmV4dFBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuYnVzeSkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHRoaXMubmV4dFBhZ2UgPj0gdGhpcy50b3RhbFBhZ2VzKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHRoaXMuYnVzeSA9IHRydWU7XG5cbiAgICAgICAgVXNlclNlcnZpY2UuZ2V0VXNlcnMoe1xuICAgICAgICAgIHBhZ2U6IHRoaXMubmV4dFBhZ2UsXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTtcblxuICAgICAgICAgIHRoaXMudXNlcnMgPSB0aGlzLnVzZXJzLmNvbmNhdChyZXNwb25zZS5kYXRhLnVzZXJzKTtcblxuICAgICAgICAgIHRoaXMudG90YWxQYWdlcyA9IHJlc3BvbnNlLmRhdGEudG90YWxQYWdlcztcbiAgICAgICAgICB0aGlzLm5leHRQYWdlICs9IDE7XG4gICAgICAgICAgdGhpcy5idXN5ID0gZmFsc2U7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICB9O1xuXG5cbiAgICAgICRzY29wZS5jaGVja2luID0gZnVuY3Rpb24odXNlcklkKSB7XG4gICAgICAgIFVzZXJTZXJ2aWNlLmNoZWNraW4odXNlcklkKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGVja2VkIGluJywgZGF0YSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICAkc2NvcGUuY2hlY2tvdXQgPSBmdW5jdGlvbih1c2VySWQpIHtcbiAgICAgICAgVXNlclNlcnZpY2UuY2hlY2tvdXQodXNlcklkKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGVja2VkIG91dCcsIGRhdGEpO1xuICAgICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIF0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2NoZWNraW4nKVxuICAuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgW1xuICAgICckc2NvcGUnLFxuICAgICdBdXRoU2VydmljZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCBBdXRoU2VydmljZSkge1xuXG4gICAgICBmdW5jdGlvbiBvblN1Y2Nlc3MoZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZygnc3VjY2VzcycsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvbkZhaWx1cmUoZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZmFpbHVyZScsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgQXV0aFNlcnZpY2UubG9naW5XaXRoUGFzc3dvcmQoXG4gICAgICAgICAgJHNjb3BlLmVtYWlsLCAkc2NvcGUucGFzc3dvcmRcbiAgICAgICAgKS50aGVuKG9uU3VjY2Vzcywgb25GYWlsdXJlKTtcbiAgICAgIH07XG4gICAgfVxuICBdKTtcbiIsIi8qKlxuICogSGVyZSBsYXkgdGhlIGJhc2UgdXJscyB1c2VkIGluIHRoZSBodHRwIHVybCBpbmplY3RvclxuICovXG5hbmd1bGFyLm1vZHVsZSgnY2hlY2tpbicpLmNvbnN0YW50KCdTRVJWRVJfVVJMJywge1xuICBCQVNFX1VSTDogICdodHRwczovL2E4ZmU5YTY5Lm5ncm9rLmlvLycsXG4gIC8vIEJBU0VfVVJMOiAgJ2h0dHBzOi8vYXBwbHkuaGFja2d0LmNvbS8nLFxuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
