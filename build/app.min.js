var app=angular.module("checkin",["ui.router","infinite-scroll"]);app.config(["$httpProvider",function(e,t){e.interceptors.push("ApiAuthenticator")}]),app.factory("ApiAuthenticator",["Session","SERVER_URL",function(e,t){return{request:function(o){0!==o.url.indexOf("api/")&&0!==o.url.indexOf("auth/")||(o.url=t.BASE_URL+o.url,o.headers["Access-Control-Allow-Origin"]=t.BASE_URL);var n=e.getToken();return n&&(o.headers["x-access-token"]=n),o}}}]),app.directive("title",["$rootScope","$timeout",function(e,t){return{link:function(){var o=function(o,n){t(function(){e.title=n.data&&n.data.pageTitle?n.data.pageTitle:"Default title"})};e.$on("$stateChangeSuccess",o)}}}]),angular.module("checkin").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"views/login/login.html",controller:"LoginController",data:{requireLogin:!1,pageTitle:"Login"}}).state("app",{abstract:!0,views:{"@":{templateUrl:"views/base.html"},"toolbar@app":{templateUrl:"views/toolbar/toolbar.html",controller:"ToolbarController"}},data:{requireLogin:!0,pageTitle:"Checkin"}}).state("app.checkin",{url:"/",templateUrl:"views/checkin/checkin.html",controller:"CheckinController"}),t.otherwise("/")}]).run(["$rootScope","$state","Session",function(e,t,o){e.$on("$stateChangeSuccess",function(){document.body.scrollTop=document.documentElement.scrollTop=0}),e.$on("$stateChangeStart",function(e,n,r){var c=n.data.requireLogin;c&&!o.getToken()&&(e.preventDefault(),t.go("login"))}),o.getToken()||t.go("login")}]),angular.module("checkin").factory("AuthService",["$q","$http","$rootScope","$state","Session",function(e,t,o,n,r){function c(t){var o=t.data;return console.log("auth success",o),r.create(o.token,o.user),e(function(e){e(o.user)})}function i(t,o){return console.log("auth fail",t),n.go("login"),e(function(e,o){o(t)})}var s={},a="auth/";return s.loginWithPassword=function(e,o){return t.post(a+"login",{email:e,password:o}).then(c,i)},s.loginWithToken=function(e){return console.warn("Not actually sure if this works yet!"),t.post(a+"login",{token:e}).then(c,function(){400===status&&r.destroy().then(i)})},s}]),angular.module("checkin").service("Session",["$rootScope","$window","$q",function(e,t,o){this.create=function(o,n){t.localStorage.jwt=o,t.localStorage.userId=n._id,t.localStorage.currentUser=JSON.stringify(n),e.currentUser=n},this.destroy=function(){return delete t.localStorage.jwt,delete t.localStorage.userId,delete t.localStorage.currentUser,e.currentUser=null,o(function(e,t){e()})},this.getToken=function(){return t.localStorage.jwt},this.getUserId=function(){return t.localStorage.userId},this.getUser=function(){return JSON.parse(t.localStorage.currentUser)}}]),angular.module("checkin").factory("UserService",["$q","$http","Session",function(e,t,o){var n="api/users",r=n+"/",c={};return c.getUsers=function(e){var o=e?n+"?"+$.param({text:e.text,page:e.page?e.page:0,size:e.size?e.size:50}):r;return t.get(o)},c.checkin=function(e){return t.post(r+e+"/checkin")},c.checkout=function(e){return t.post(r+e+"/checkout")},c}]),angular.module("checkin").controller("CheckinController",["$scope","UserService",function(e,t){var o=$(".userSearch > .sticky");o.sticky({context:".userList > table"}),e.users={users:[],busy:!1,nextPage:0,totalPages:1/0,totalUsers:0},e.selectedUser=null,e.setSelectedUser=function(t){var o=$(".userDetails");o.modal(),e.selectedUser=t,t?o.modal("show"):o.modal("hide")},e.users.getNextPage=function(){this.busy||this.nextPage>=this.totalPages||(o.sticky("refresh"),this.busy=!0,t.getUsers({page:this.nextPage}).then(function(e){console.log(e.data),this.users=this.users.concat(e.data.users),this.totalUsers=e.data.totalUsers,this.totalPages=e.data.totalPages,this.nextPage+=1,this.busy=!1,o.sticky("refresh")}.bind(this)))},e.checkin=function(e){t.checkin(e).then(function(e){console.log("checked in",e)})},e.checkout=function(e){t.checkout(e).then(function(e){console.log("checked out",e)})}}]),angular.module("checkin").controller("LoginController",["$scope","$state","AuthService",function(e,t,o){function n(e){console.log("success",e),t.go("app.checkin")}function r(e){console.log("failure",e)}e.login=function(){o.loginWithPassword(e.email,e.password).then(n,r)}}]),angular.module("checkin").controller("ToolbarController",["$scope","$state","Session",function(e,t,o){$(".logout").click(function(){o.destroy().then(function(){t.go("login")})})}]),angular.module("checkin").constant("SERVER_URL",{BASE_URL:"https://ce4e7571.ngrok.io/"});
//# sourceMappingURL=data:application/json;base64,
